{"version":3,"sources":["main.ts"],"names":[],"mappings":";;AAAA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,0CAA0C,CAAC;AAClE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC;AACrC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,QAAQ,CAAC;AAEvC,2BAA6B;AAC7B,2BAA6B;AAC7B,6BAA+B;AAE/B,uBAAyB;AAEzB,iCAAmC;AAEnC,kCAAoC;AAEvB,QAAA,GAAG,GAAwB,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;AACzE,IAAM,aAAa,GAAqB,OAAO,CAAC,oBAAoB,CAAC,QAAQ,EAAE,8CAA8C,EAAE,IAAI,EAAE;IACnI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE;IAC/C,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE;IAChD,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;IAChD,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE;IAC7C,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE;CACnD,CAAC,CAAC;AACH,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AAElC,IAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC,CAAC;AACrF,IAAM,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC,CAAC;AAElF,IAAM,WAAW,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AACjD,IAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AAEtB,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAChB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;AAEhE,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AAC1C,IAAM,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;AAEzD,IAAM,QAAQ,GAAG,IAAI,CAAC;AACtB,IAAM,SAAS,GAAG,IAAI,CAAC;AAEvB,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE;IAC1B,WAAG,CAAC,IAAI,CAAC,8BAA8B,GAAG,QAAQ,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC;AACH,WAAW,CAAC,MAAM,CAAC,SAAS,EAAE;IAC5B,WAAG,CAAC,IAAI,CAAC,+BAA+B,GAAG,SAAS,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC;AAEH,gBAAgB,GAAoB,EAAE,GAAqB,EAAE,IAA0B;IACrF,IAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,aAAa,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;IAC5E,WAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAC5C,IAAI,EAAE,CAAC;AACT,CAAC","file":"main.js","sourcesContent":["process.env['DEBUG'] = '*::INFO, *::WARN, *::ERR, *::SEVERE, *::';\nprocess.env['DEBUG_COLORS'] = 'true';\nprocess.env['DEBUG_STREAM'] = 'stdout';\n\nimport * as path from 'path';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as child from 'child_process';\nimport * as fs from 'fs';\n\nimport * as express from 'express';\nimport * as bodyparser from 'body-parser';\nimport * as debugsx from 'debug-sx';\n\nexport const log: debugsx.IFullLogger = debugsx.createFullLogger('main');\nconst consolelogger: debugsx.IHandler = debugsx.createConsoleHandler('stdout', '*::INFO, *::FINE, *::SEVERE, *::ERR, *::WARN', '-*', [\n  { level: 'INFO', color: 'cyan', inverse: true },\n  { level: 'FINE', color: 'white', inverse: true },\n  { level: 'SEVERE', color: 'red', inverse: true },\n  { level: 'ERR', color: 'red', inverse: true },\n  { level: 'WARN', color: 'magenta', inverse: true }\n]);\ndebugsx.addHandler(consolelogger);\n\nconst privKey = fs.readFileSync(path.join(__dirname, '../../../../x509/server.pem'));\nconst cert = fs.readFileSync(path.join(__dirname, '../../../../x509/server.crt'));\n\nconst credentials = { key: privKey, cert: cert };\nconst app = express();\n\napp.use(logger);\napp.use(express.static(path.join(__dirname, '../../ng2/dist')));\n\nconst httpServer = http.createServer(app);\nconst httpsServer = https.createServer(credentials, app);\n\nconst httpport = 8080;\nconst httpsport = 8443;\n\nhttpServer.listen(httpport, () => {\n  log.info('http server running on port ' + httpport);\n});\nhttpsServer.listen(httpsport, () => {\n  log.info('hhtps server running on port ' + httpsport);\n});\n\nfunction logger(req: express.Request, res: express.Response, next: express.NextFunction) {\n  const clientSocket = req.socket.remoteAddress + ':' + req.socket.remotePort;\n  log.info(req.method, req.url, clientSocket);\n  next();\n}\n"],"sourceRoot":"/home/user/Git/m13-5ahme-fivu/projects/ue10-https-server/server"}