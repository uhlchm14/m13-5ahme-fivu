{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["process.env['DEBUG'] = '*::INFO, *::WARN, *::ERR, *::SEVERE, *::';\r\nprocess.env['DEBUG_COLORS'] = 'true';\r\nprocess.env['DEBUG_STREAM'] = 'stdout';\r\n\r\nimport * as path from 'path';\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\nimport * as child from 'child_process';\r\nimport * as fs from 'fs';\r\n\r\nimport * as express from 'express';\r\nimport * as bodyparser from 'body-parser';\r\nimport * as debugsx from 'debug-sx';\r\nimport * as nconf from 'nconf';\r\n\r\nexport const log: debugsx.IFullLogger = debugsx.createFullLogger('main');\r\nconst consolelogger: debugsx.IHandler = debugsx.createConsoleHandler('stdout', '*::INFO, *::FINE, *::SEVERE, *::ERR, *::WARN', '-*', [\r\n  { level: 'INFO', color: 'cyan', inverse: true },\r\n  { level: 'FINE', color: 'white', inverse: true },\r\n  { level: 'SEVERE', color: 'red', inverse: true },\r\n  { level: 'ERR', color: 'red', inverse: true },\r\n  { level: 'WARN', color: 'magenta', inverse: true }\r\n]);\r\ndebugsx.addHandler(consolelogger);\r\n\r\n// region comment\r\n// const privKey = fs.readFileSync(path.join(__dirname, '../../../../x509/server.pem'));\r\n// const cert = fs.readFileSync(path.join(__dirname, '../../../../x509/server.crt'));\r\n\r\n// const credentials = { key: privKey, cert: cert };\r\n// const app = express();\r\n\r\n// app.use(logger);\r\n// app.use(express.static(path.join(__dirname, '../../ng2/dist')));\r\n\r\n// const httpServer = http.createServer(app);\r\n// const httpsServer = https.createServer(credentials, app);\r\n\r\n// const httpport = 8080;\r\n// const httpsport = 8443;\r\n\r\n// httpServer.listen(httpport, () => {\r\n//   log.info('http server running on port ' + httpport);\r\n// });\r\n// httpsServer.listen(httpsport, () => {\r\n//   log.info('hhtps server running on port ' + httpsport);\r\n// });\r\n\r\n// function logger(req: express.Request, res: express.Response, next: express.NextFunction) {\r\n//   const clientSocket = req.socket.remoteAddress + ':' + req.socket.remotePort;\r\n//   log.info(req.method, req.url, clientSocket);\r\n//   next();\r\n// }\r\n// endregion\r\n\r\nclass Main {\r\n  private _express: any;\r\n  private _config: { port: number };\r\n\r\n  constructor() {\r\n    const configFile = path.join(__dirname, '../config.json');\r\n    nconf.file(configFile);\r\n    this._config = nconf.get('server');\r\n    if (!this._config || isNaN(this._config.port)) {\r\n      throw new Error('invalid configuration');\r\n    }\r\n  }\r\n\r\n  public async start(): Promise<void> {\r\n    this._express = express();\r\n    this._express.use(bodyparser.urlencoded({ extended: true }));\r\n\r\n    this._express.get(['/', '/index.html', '/index.htm'], (req, res, next) => this.handleGetStartup(req, res, next));\r\n    this._express.use(express.static(path.join(__dirname, '../../ng2/dist')));\r\n    this._express.get('/error', (req, res, next) => this.handleGetError);\r\n    this._express.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => this.handleError(err, req, res, next));\r\n\r\n    http.createServer(this._express).listen(this._config.port);\r\n    log.info('Server started on port ' + this._config.port);\r\n  }\r\n\r\n  public handleGetStartup(req: express.Request, res: express.Response, next: express.NextFunction) {\r\n    try {\r\n      log.info('get request from client');\r\n      this._express.use(express.static(path.join(__dirname, '../../ng2/dist')));\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n\r\n  public handleGetError(req: express.Request, res: express.Response, next: express.NextFunction) {\r\n    try {\r\n      throw new Error('FUCK OFF');\r\n    } catch (error) {\r\n      next(error);\r\n    }\r\n  }\r\n\r\n  public handleError(err: any, req: express.Request, res: express.Response, next: express.NextFunction) {\r\n    log.warn(err);\r\n    res.sendStatus(500).send(err);\r\n  }\r\n}\r\n\r\nasync function startup() {\r\n  const main = new Main();\r\n  await main.start();\r\n}\r\n\r\nstartup().catch(err => log.severe(err));\r\n"],"sourceRoot":"E:\\Git\\m13-5ahme-fivu\\projects\\ue11_angularServer\\server"}