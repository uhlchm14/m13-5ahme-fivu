{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["process.env['DEBUG'] = '*::INFO, *::WARN, *::ERR, *::SEVERE, *::';\nprocess.env['DEBUG_COLORS'] = 'true';\nprocess.env['DEBUG_STREAM'] = 'stdout';\n\nimport * as path from 'path';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as child from 'child_process';\nimport * as fs from 'fs';\n\nimport * as express from 'express';\nimport * as bodyparser from 'body-parser';\nimport * as debugsx from 'debug-sx';\nimport * as nconf from 'nconf';\n\nexport const log: debugsx.IFullLogger = debugsx.createFullLogger('main');\nconst consolelogger: debugsx.IHandler = debugsx.createConsoleHandler('stdout', '*::INFO, *::FINE, *::SEVERE, *::ERR, *::WARN', '-*', [\n  { level: 'INFO', color: 'cyan', inverse: true },\n  { level: 'FINE', color: 'white', inverse: true },\n  { level: 'SEVERE', color: 'red', inverse: true },\n  { level: 'ERR', color: 'red', inverse: true },\n  { level: 'WARN', color: 'magenta', inverse: true }\n]);\ndebugsx.addHandler(consolelogger);\n\n// region comment\n// const privKey = fs.readFileSync(path.join(__dirname, '../../../../x509/server.pem'));\n// const cert = fs.readFileSync(path.join(__dirname, '../../../../x509/server.crt'));\n\n// const credentials = { key: privKey, cert: cert };\n// const app = express();\n\n// app.use(logger);\n// app.use(express.static(path.join(__dirname, '../../ng2/dist')));\n\n// const httpServer = http.createServer(app);\n// const httpsServer = https.createServer(credentials, app);\n\n// const httpport = 8080;\n// const httpsport = 8443;\n\n// httpServer.listen(httpport, () => {\n//   log.info('http server running on port ' + httpport);\n// });\n// httpsServer.listen(httpsport, () => {\n//   log.info('hhtps server running on port ' + httpsport);\n// });\n\n// function logger(req: express.Request, res: express.Response, next: express.NextFunction) {\n//   const clientSocket = req.socket.remoteAddress + ':' + req.socket.remotePort;\n//   log.info(req.method, req.url, clientSocket);\n//   next();\n// }\n// endregion\n\nclass Main {\n  private _express: any;\n  private _config: { port: number };\n\n  constructor() {\n    const configFile = path.join(__dirname, '../config.json');\n    nconf.file(configFile);\n    this._config = nconf.get('server');\n    if (!this._config || isNaN(this._config.port)) {\n      throw new Error('invalid configuration');\n    }\n  }\n\n  public async start(): Promise<void> {\n    this._express = express();\n    this._express.use(bodyparser.urlencoded({ extended: true }));\n\n    this._express.get(['/', '/index.html', '/index.htm'], (req, res, next) => this.handleGetStartup(req, res, next));\n    this._express.get('/error', (req, res, next) => this.handleGetError);\n    this._express.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) =>\n      this.handleError(err, req, res, next)\n    );\n\n    http.createServer(this._express).listen(4711);\n  }\n\n  public handleGetStartup(req: express.Request, res: express.Response, next: express.NextFunction) {\n    try {\n      log.info('get request from client');\n      res.send('starting angular...');\n    } catch (err) {\n      next(err);\n    }\n  }\n\n  public handleGetError(req: express.Request, res: express.Response, next: express.NextFunction) {\n    try {\n      throw new Error('FUCK OFF');\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  public handleError(err: any, req: express.Request, res: express.Response, next: express.NextFunction) {\n    log.warn(err);\n    res.sendStatus(500).send(err);\n  }\n}\n\nasync function startup() {\n  const main = new Main();\n  await main.start();\n}\n\nstartup().catch(err => log.severe(err));\n"],"sourceRoot":"/home/user/Git/m13-5ahme-fivu/projects/ue11_angularServer/server"}